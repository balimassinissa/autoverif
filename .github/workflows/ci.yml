name: CI
on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

env:
  NODE_VERSION: 18

jobs:
  setup:
    name: Setup job (cache)
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'                          # setup-node gère le cache pour npm
          cache-dependency-path: '**/package-lock.json'

      - name: Cache npm & node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        working-directory: backend
        run: npm ci --prefer-offline --no-audit --progress=false
        # npm ci requiert package-lock.json engagé (déterministe pour CI)

  lint-and-test:
    name: Lint & Unit tests
    needs: setup
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: autoverif
          POSTGRES_PASSWORD: password
          POSTGRES_DB: autoverif_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U autoverif"
          --health-interval 10s --health-timeout 5s --health-retries 5
      minio:
        image: minio/minio
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
        options: >-
          --health-cmd "curl -fsS http://localhost:9000/minio/health/live || exit 1"
          --health-interval 10s --health-timeout 5s --health-retries 5
        command: server /data --console-address ":9001"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install deps
        run: npm ci --prefer-offline --no-audit --progress=false

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U autoverif; do sleep 1; done

      - name: Lint
        run: npm run lint

      - name: Run unit tests (with coverage)
        env:
          DATABASE_URL: postgresql://autoverif:password@localhost:5432/autoverif_test
          S3_ENDPOINT: http://localhost:9000
          S3_ACCESS_KEY: minio
          S3_SECRET_KEY: minio123
        run: npm run test:ci

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

  build:
    name: Build
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install deps
        run: npm ci --prefer-offline --no-audit --progress=false

      - name: Build backend
        run: npm run build

      - name: Archive build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: dist

  trivy-scan:
    name: Trivy container scan
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub (optional)
        run: |    
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          else
            echo "No DockerHub credentials, skipping login"
          fi
      - name: Build docker image
        run: docker build -t autoverif/backend:${{ github.sha }} -f backend/Dockerfile .

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: autoverif/backend:${{ github.sha }}
          format: 'table'
          exit-code: '1'      # fait échouer le job si vulnérabilités HIGH/CRITICAL
          severity: 'CRITICAL,HIGH'

  codeql:
    name: CodeQL Scan
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  upload-artifacts:
    name: Upload artifacts
    needs: [build, trivy-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: ./dist

      - name: Upload final artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-backend
          path: ./dist
